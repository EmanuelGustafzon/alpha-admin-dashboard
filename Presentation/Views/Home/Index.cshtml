@model ProjectViewModel
@{
    ViewData["Title"] = "Projects";
}
<div class="projects-top-bar">
    <h2>Projects</h2>
    <button data-targetId="#add-project" data-openModal="true" class="btn btn-primary ">+ Add Project</button>
</div>
<div class="filter-projects">
    <div class="active-filter tab-link">
        <p>ALL[8]</p>
    </div>
    <div class="nav-link">
        <p>STARTED[4]</p>
    </div>
    <div class="nav-link">
        <p>COMPLETED[2]</p>
    </div>
</div>

<div id="projects-view" class="projects-view"></div>

@await Html.PartialAsync("PartialViews/_AddProject", Model)
@await Html.PartialAsync("PartialViews/_Addmembers", Model)
@await Html.PartialAsync("PartialViews/_EditProject", Model)

<script>
    
    window.addEventListener('DOMContentLoaded', () => {
        getProjects();
    })

    let debounceTimer;
    document.getElementById("search-field").addEventListener("input", (e) => {
        clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => {
            getProjects(e.target.value);
        }, 500);
    });

    async function getProjects(query = "") {
        const url = `https://localhost:8081/Home/Projects?query=${query}`;
        const data = await fetchData(url)
        console.log(data)
        const projectView = document.getElementById('projects-view')
        projectView.innerHTML = "";
        for(let p of data) {
            let card = projectCard(p.id, p.imageUrl, p.projectName, p.client.clientName, p.description, p.members)
            projectView.insertAdjacentHTML('beforeend', card)
        }
    }

    function projectCard(id, imageUrl, projectName, clientName, description, members) {
        return `
        <div class="project-card">
            <div>
                <img class="project-img" src="${imageUrl}" alt="project display image">
            </div>
            <div class="project-card-headings">
                <h6 class="project-name">${projectName}</h6>
                <p class="org-name">${clientName}</p>
            </div>
            <div class="project-card-settings">
                <div class="popover-container">
                    <button data-open-pop-over data-targetId="#pop-over-${id}" ><i class="bi bi-three-dots"></i></button>
                    <div id="pop-over-${id}" data-pop-over class="popover d-none">
                        <div class="flex align c-gap-5">
                            <i class="bi bi-pencil-square"></i>
                            <button onclick="fetchPopulateProject('${id}')" data-targetId="#edit-project" data-openModal="true" class="btn-clean">
                                Edit Project
                            </button>
                        </div>
                        <div class="flex align c-gap-5 border-bottom">
                            <i class="bi bi-person-add"></i>
                            <button data-targetId="#add-members" data-openModal="true" class="btn-clean">
                                Add Members
                            </button>
                        </div>
                        <div class="flex align c-gap-5">
                            <i class="bi bi-trash text-error"></i>
                            <button class="btn-clean text-error">
                                Delete
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="project-card-content">
                <p>${description}</p>
            </div>
            <div class="label project-countdown">
                <i class="bi bi-clock-fill"> <span>1 week left</span></i>
            </div>
            <div class="project-members">
                ${members.map(member => (`<img class="profile-img-medium" src="${member.imageUrl}" />`)).join('')}
            </div>
        </div>
            `};
</script>




